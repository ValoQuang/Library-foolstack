{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../../baseUrl';\nimport { editPasswordDispatch } from './userAction';\nexport const booksLoading = () => ({\n  type: ActionTypes.BOOKS_LOADING\n});\nexport const booksFailed = errmess => ({\n  type: ActionTypes.BOOKS_FAILED,\n  payload: errmess\n});\nexport const addBooks = books => ({\n  type: ActionTypes.ADD_BOOKS,\n  payload: books\n});\nexport const addBook = book => ({\n  type: ActionTypes.ADD_BOOK,\n  payload: book\n});\nexport const editBookdispatch = books => ({\n  type: ActionTypes.EDIT_BOOK,\n  payload: books\n});\nexport const deleteBookdispatch = resp => ({\n  type: ActionTypes.DELETE_BOOK,\n  payload: resp\n});\nexport const postBook = (name, author, description, isbn, cat, floor, shelf, copies) => async dispatch => {\n  const newBook = {\n    name: name,\n    author: author,\n    description: description,\n    isbn: isbn,\n    cat: cat,\n    floor: floor,\n    shelf: shelf,\n    copies: copies\n  };\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return await fetch(baseUrl + 'books', {\n    method: \"POST\",\n    body: JSON.stringify(newBook),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': bearer\n    } //   ,        credentials: \"same-origin\"\n\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    alert('Book added successfully');\n    return dispatch(addBook(response));\n  }).catch(error => {\n    alert('Your book could not be added\\nError: ' + error.message);\n  });\n};\nexport const editBook = (_id, name, author, description, isbn, cat, floor, shelf, copies) => async dispatch => {\n  const newBook = {\n    name: name,\n    author: author,\n    description: description,\n    isbn: isbn,\n    cat: cat,\n    floor: floor,\n    shelf: shelf,\n    copies: copies\n  };\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'books/' + _id, {\n    method: \"PUT\" //  ,     credentials: 'same-origin'\n    ,\n    body: JSON.stringify(newBook),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': bearer\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(editBookdispatch(response))).catch(error => {\n    alert('Your book could not be edited\\nError: ' + error.message);\n  });\n};\nexport const editPassword = (_id, username, password) => async dispatch => {\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'users/password/' + _id, {\n    method: \"PUT\" //  ,     credentials: 'same-origin'\n    ,\n    body: JSON.stringify({\n      password: password\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': bearer\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText + '\\n ');\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    let newCreds = {\n      username: username,\n      password: password\n    };\n    localStorage.removeItem('creds');\n    localStorage.setItem('creds', JSON.stringify(newCreds));\n    alert('Password changed successfully');\n    return dispatch(editPasswordDispatch(newCreds));\n  }).catch(error => {\n    alert('Your password could not be changed\\nError: ' + error.message);\n  });\n};\nexport const fetchBooks = () => async dispatch => {\n  dispatch(booksLoading());\n  return fetch(baseUrl + 'books').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(books => dispatch(addBooks(books))).catch(error => dispatch(booksFailed(error.message)));\n};\nexport const deleteBook = _id => async dispatch => {\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return await fetch(baseUrl + 'books/' + _id, {\n    method: \"DELETE\" //  ,       credentials: \"same-origin\"\n    ,\n    headers: {\n      'Authorization': bearer\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(deleteBookdispatch(response))).catch(error => {\n    alert('Your book could not be deleted\\nError: ' + error.message);\n  });\n};","map":{"version":3,"sources":["C:/Users/Quang/Documents/GitHub/Library-management-/client/src/redux/actions/bookAction.tsx"],"names":["ActionTypes","baseUrl","editPasswordDispatch","booksLoading","type","BOOKS_LOADING","booksFailed","errmess","BOOKS_FAILED","payload","addBooks","books","ADD_BOOKS","addBook","book","ADD_BOOK","editBookdispatch","EDIT_BOOK","deleteBookdispatch","resp","DELETE_BOOK","postBook","name","author","description","isbn","cat","floor","shelf","copies","dispatch","newBook","bearer","localStorage","getItem","fetch","method","body","JSON","stringify","headers","then","response","ok","error","Error","status","statusText","json","alert","catch","message","editBook","_id","editPassword","username","password","newCreds","removeItem","setItem","fetchBooks","deleteBook"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport {baseUrl} from '../../baseUrl'\r\nimport { editPasswordDispatch } from './userAction';\r\n\r\nexport const booksLoading = () => ({\r\n    type: ActionTypes.BOOKS_LOADING\r\n});\r\n\r\nexport const booksFailed = (errmess:any) => ({\r\n    type: ActionTypes.BOOKS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addBooks = (books:any) => ({\r\n    type: ActionTypes.ADD_BOOKS,\r\n    payload: books\r\n});\r\n\r\n\r\nexport const addBook = (book:any) => ({\r\n  type: ActionTypes.ADD_BOOK,\r\n  payload: book\r\n});\r\n\r\nexport const editBookdispatch = (books:any) => ({\r\n    type: ActionTypes.EDIT_BOOK,\r\n    payload: books\r\n  });\r\n  \r\n\r\n\r\nexport const deleteBookdispatch = (resp:any) => ({\r\n    type: ActionTypes.DELETE_BOOK,\r\n    payload: resp\r\n});\r\n\r\nexport const postBook = (name:string, author:string, description:string, isbn:number, cat:string, floor:number, shelf:number, copies:number) => async (dispatch:Function) => {\r\n    const newBook = {\r\n      name: name, author: author,\r\n       description: description, isbn: isbn,\r\n        cat: cat, floor: floor, \r\n        shelf: shelf, copies: copies\r\n    };\r\n    const bearer = 'Bearer ' + localStorage.getItem('token');\r\n    return await fetch(baseUrl + 'books', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newBook),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': bearer\r\n        }\r\n     //   ,        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error:any = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => { alert('Book added successfully');\r\n      return  dispatch(addBook(response));})\r\n    .catch(error =>  { alert('Your book could not be added\\nError: '+error.message); });\r\n};\r\n\r\nexport const editBook = (_id:string, name:string, author:string, description:string, isbn:number, cat:string, floor:number, shelf:number, copies:number) => async (dispatch:Function) => {\r\n    const newBook = {\r\n      name: name, author: author,\r\n       description: description, isbn: isbn,\r\n        cat: cat, floor: floor, \r\n        shelf: shelf, copies: copies\r\n    };\r\n    const bearer = 'Bearer ' + localStorage.getItem('token');\r\n    return fetch(baseUrl + 'books/' + _id, {\r\n        method: \"PUT\"\r\n      //  ,     credentials: 'same-origin'\r\n        ,      body: JSON.stringify(newBook),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': bearer\r\n        } })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error:any = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => (dispatch(editBookdispatch(response))))\r\n    .catch(error =>  {  \r\n    alert('Your book could not be edited\\nError: '+error.message); });\r\n  };\r\n  \r\n  export const editPassword = (_id:string,username:string,password:string) => async (dispatch:Function) => {\r\n    const bearer = 'Bearer ' + localStorage.getItem('token');\r\n    return fetch(baseUrl + 'users/password/' + _id, {\r\n      method: \"PUT\"\r\n    //  ,     credentials: 'same-origin'\r\n      ,      body: JSON.stringify({password: password}),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        'Authorization': bearer\r\n      } })\r\n  .then(response => {\r\n      if (response.ok) {\r\n        return response;\r\n      } else {\r\n        var error:any = new Error('Error ' + response.status + ': ' + response.statusText+'\\n ');\r\n        error.response = response;\r\n        throw error;\r\n      }\r\n    },\r\n    error => {\r\n          throw error;\r\n    })\r\n  .then(response => response.json())\r\n  .then(response => { \r\n    let newCreds={username: username, password: password};\r\n    localStorage.removeItem('creds');\r\n    localStorage.setItem('creds', JSON.stringify(newCreds));\r\n    alert('Password changed successfully');\r\n    return dispatch(editPasswordDispatch(newCreds));})\r\n  .catch(error =>  {  \r\n  alert('Your password could not be changed\\nError: '+error.message); });\r\n}\r\n\r\n  export const fetchBooks = () => async (dispatch:Function) => {\r\n    dispatch(booksLoading());\r\n    return fetch(baseUrl+'books')\r\n        .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error:any = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(books => dispatch(addBooks(books)))\r\n    .catch(error => dispatch(booksFailed(error.message)));\r\n}\r\n\r\nexport const deleteBook = (_id:string) => async (dispatch:Function) => { \r\n    const bearer = 'Bearer ' + localStorage.getItem('token');    \r\n    return await fetch(baseUrl + 'books/' + _id, {\r\n        method: \"DELETE\"\r\n      //  ,       credentials: \"same-origin\"\r\n        ,       headers: {\r\n          'Authorization': bearer\r\n        }\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error:any = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(deleteBookdispatch(response)))\r\n    .catch(error =>  {alert('Your book could not be deleted\\nError: '+error.message); });\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}