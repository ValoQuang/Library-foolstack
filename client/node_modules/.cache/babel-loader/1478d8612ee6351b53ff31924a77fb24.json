{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../../baseUrl';\nexport const addIssue = issue => ({\n  type: ActionTypes.ADD_ISSUE,\n  payload: issue\n});\nexport const postIssue = (bookId, studentId) => dispatch => {\n  const newIssue = {\n    book: bookId,\n    student: studentId\n  };\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'issues', {\n    method: \"POST\",\n    body: JSON.stringify(newIssue),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': bearer\n    } //   ,        credentials: \"same-origin\"\n\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    alert('Book issued successfully');\n    return dispatch(addIssue(response));\n  }).catch(error => {\n    alert('Book could not be issued\\nError: ' + error.message + '\\n' + 'May be the student has already issued 3 books and not returned. Please return them first. \\n' + 'or the book may not available. You can wait for some days, until the book is returned to library.');\n  });\n};\nexport const returnBookdispatch = issue => ({\n  type: ActionTypes.RETURN_ISSUE,\n  payload: issue\n});\nexport const returnIssue = issueId => dispatch => {\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'issues/' + issueId, {\n    method: \"PUT\" //  ,     credentials: 'same-origin'\n    ,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': bearer\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    alert('Book returned successfully');\n    return dispatch(returnBookdispatch(response));\n  }).catch(error => {\n    alert('The book could not be returned\\nError: ' + error.message);\n  });\n};\nexport const fetchIssues = student => async dispatch => {\n  let issueUrl;\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n\n  if (student) {\n    issueUrl = 'issues/student';\n  } else {\n    issueUrl = 'issues';\n  }\n\n  await dispatch(issuesLoading());\n  return fetch(baseUrl + issueUrl, {\n    headers: {\n      'Authorization': bearer\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(issues => dispatch(addIssues(issues))).catch(error => dispatch(issuesFailed(error.message)));\n};\nexport const issuesLoading = () => ({\n  type: ActionTypes.ISSUES_LOADING\n});\nexport const issuesFailed = errmess => ({\n  type: ActionTypes.ISSUES_FAILED,\n  payload: errmess\n});\nexport const addIssues = issues => ({\n  type: ActionTypes.ADD_ISSUES,\n  payload: issues\n});\nexport const requestLogout = () => {\n  return {\n    type: ActionTypes.LOGOUT_REQUEST\n  };\n};\nexport const receiveLogout = () => {\n  return {\n    type: ActionTypes.LOGOUT_SUCCESS\n  };\n};","map":{"version":3,"sources":["C:/Users/Quang/Documents/GitHub/Library-management-/client/src/redux/actions/issueAction.tsx"],"names":["ActionTypes","baseUrl","addIssue","issue","type","ADD_ISSUE","payload","postIssue","bookId","studentId","dispatch","newIssue","book","student","bearer","localStorage","getItem","fetch","method","body","JSON","stringify","headers","then","response","ok","error","Error","status","statusText","json","alert","catch","message","returnBookdispatch","RETURN_ISSUE","returnIssue","issueId","fetchIssues","issueUrl","issuesLoading","errmess","issues","addIssues","issuesFailed","ISSUES_LOADING","ISSUES_FAILED","ADD_ISSUES","requestLogout","LOGOUT_REQUEST","receiveLogout","LOGOUT_SUCCESS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport {baseUrl} from '../../baseUrl'\r\n\r\nexport const addIssue = (issue:any) => ({\r\n    type: ActionTypes.ADD_ISSUE,\r\n    payload: issue\r\n  });\r\n  \r\n  export const postIssue = (bookId:string,studentId:string) => (dispatch:Function) => {\r\n      const newIssue = {\r\n      book: bookId,\r\n      student: studentId \r\n      };\r\n      const bearer = 'Bearer ' + localStorage.getItem('token');\r\n      return fetch(baseUrl + 'issues', {\r\n          method: \"POST\",\r\n          body: JSON.stringify(newIssue),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            'Authorization': bearer\r\n          }\r\n       //   ,        credentials: \"same-origin\"\r\n      })\r\n      .then(response => {\r\n          if (response.ok) {\r\n            return response;\r\n          } else {\r\n            var error:any = new Error('Error ' + response.status + ': ' + response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n          }\r\n        },\r\n        error => {\r\n              throw error;\r\n        })\r\n      .then(response => response.json())\r\n      .then(response => { alert('Book issued successfully');\r\n        return  dispatch(addIssue(response));})\r\n      .catch(error =>  {\r\n        alert('Book could not be issued\\nError: '+error.message+'\\n'+\r\n        'May be the student has already issued 3 books and not returned. Please return them first. \\n'+\r\n        'or the book may not available. You can wait for some days, until the book is returned to library.'); });\r\n  };\r\n\r\n  export const returnBookdispatch = (issue:any) => ({\r\n    type: ActionTypes.RETURN_ISSUE,\r\n    payload: issue\r\n  });\r\n  \r\n  export const returnIssue = (issueId:any) => (dispatch:Function) => {\r\n    const bearer = 'Bearer ' + localStorage.getItem('token');\r\n    return fetch(baseUrl + 'issues/' + issueId, {\r\n        method: \"PUT\"\r\n      //  ,     credentials: 'same-origin'\r\n      , headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': bearer\r\n        } })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error:any = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => { \r\n      alert('Book returned successfully');\r\n      return dispatch(returnBookdispatch(response));})\r\n    .catch(error =>  {  \r\n    alert('The book could not be returned\\nError: '+error.message); });\r\n  };\r\n  \r\n  export const fetchIssues = (student:any) => async (dispatch:Function) => {\r\n    let issueUrl:string;\r\n     const bearer =  'Bearer ' + localStorage.getItem('token');\r\n     if(student) {\r\n       issueUrl= 'issues/student';\r\n    }\r\n    else {\r\n      issueUrl='issues';\r\n    }\r\n    await dispatch(issuesLoading());\r\n    return fetch(baseUrl+issueUrl,{\r\n       headers: {\r\n          'Authorization': bearer\r\n         }\r\n    })\r\n        .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error:any = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(issues => dispatch(addIssues(issues)))\r\n    .catch(error => dispatch(issuesFailed(error.message)));\r\n  }\r\n  \r\n  \r\n  \r\n  export const issuesLoading = () => ({\r\n    type: ActionTypes.ISSUES_LOADING\r\n  });\r\n  \r\n  export const issuesFailed = (errmess:any) => ({\r\n    type: ActionTypes.ISSUES_FAILED,\r\n    payload: errmess\r\n  });\r\n  \r\n  export const addIssues = (issues:any) => ({\r\n    type: ActionTypes.ADD_ISSUES,\r\n    payload: issues\r\n  });\r\n\r\n  export const requestLogout = () => {\r\n    return {\r\n      type: ActionTypes.LOGOUT_REQUEST\r\n    }\r\n  }\r\n  \r\n  export const receiveLogout = () => {\r\n    return {\r\n      type: ActionTypes.LOGOUT_SUCCESS\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}