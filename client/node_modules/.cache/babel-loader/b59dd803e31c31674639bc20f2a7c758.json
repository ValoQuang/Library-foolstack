{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../../baseUrl';\nimport { fetchIssues, requestLogout, receiveLogout } from \"./issueAction\"; //Edit user\n\nexport const editUser = (_id, firstname, lastname, roll, email) => async dispatch => {\n  const newUser = {\n    firstname: firstname,\n    lastname: lastname,\n    roll: roll,\n    email: email\n  };\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return await fetch(baseUrl + 'users/' + _id, {\n    method: \"PUT\" //  ,     credentials: 'same-origin'\n    ,\n    body: JSON.stringify(newUser),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': bearer\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    localStorage.removeItem('userinfo');\n    localStorage.setItem('userinfo', JSON.stringify(response));\n    return dispatch(editUserdispatch(response));\n  }).catch(error => {\n    alert('Your profile could not be edited\\nError: ' + error.message + '\\n May be someone has already registered with that Roll No. or Email');\n  });\n}; //Load users\n\nexport const usersFailed = errmess => ({\n  type: ActionTypes.USERS_FAILED,\n  payload: errmess\n});\nexport const usersLoading = () => ({\n  type: ActionTypes.USERS_LOADING\n});\nexport const fetchUsers = () => async dispatch => {\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  dispatch(usersLoading());\n  return fetch(baseUrl + 'users', {\n    headers: {\n      'Authorization': bearer\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(users => dispatch(addUsers(users))).catch(error => dispatch(usersFailed(error.message)));\n};\nexport const addUsers = users => ({\n  type: ActionTypes.ADD_USERS,\n  payload: users\n});\nexport const editUserdispatch = USER => ({\n  type: ActionTypes.EDIT_USER,\n  payload: USER\n});\nexport const editPasswordDispatch = CREDS => ({\n  type: ActionTypes.EDIT_PASSWORD,\n  payload: CREDS\n});\nexport const requestLogin = creds => {\n  return {\n    type: ActionTypes.LOGIN_REQUEST,\n    creds\n  };\n};\nexport const receiveLogin = response => {\n  return {\n    type: ActionTypes.LOGIN_SUCCESS,\n    token: response.token,\n    userinfo: response.userinfo\n  };\n};\nexport const loginError = message => {\n  return {\n    type: ActionTypes.LOGIN_FAILURE,\n    message\n  };\n};\nexport const loginUser = creds => async dispatch => {\n  dispatch(requestLogin(creds));\n  return fetch(baseUrl + 'users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(creds)\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    if (response.success) {\n      // If login was successful, set the token in local storage\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('creds', JSON.stringify(creds));\n      localStorage.setItem('userinfo', JSON.stringify(response.userinfo));\n      dispatch(fetchIssues(!response.userinfo.admin));\n\n      if (response.userinfo.admin) {\n        dispatch(fetchUsers());\n      }\n\n      setTimeout(() => {\n        logoutUser();\n        alert('Your JWT token has expired. \\nPlease log in again to continue.');\n      }, 3600 * 1000); // Dispatch the success action\n\n      dispatch(receiveLogin(response));\n    } else {\n      var error = new Error('Error ' + response.status);\n      error.response = response;\n      throw error;\n    }\n  }).catch(error => {\n    alert(error.message + '\\n' + \"Username and password didn't match\");\n    return dispatch(loginError(error.message));\n  });\n};\nexport const logoutUser = () => dispatch => {\n  dispatch(requestLogout());\n  localStorage.removeItem('token');\n  localStorage.removeItem('creds');\n  localStorage.removeItem('userinfo');\n  dispatch(receiveLogout());\n};\nexport const editPassword = (_id, username, password) => async dispatch => {\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'users/password/' + _id, {\n    method: \"PUT\" //  ,     credentials: 'same-origin'\n    ,\n    body: JSON.stringify({\n      password: password\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': bearer\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText + '\\n ');\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    let newCreds = {\n      username: username,\n      password: password\n    };\n    localStorage.removeItem('creds');\n    localStorage.setItem('creds', JSON.stringify(newCreds));\n    alert('Password changed successfully');\n    return dispatch(editPasswordDispatch(newCreds));\n  }).catch(error => {\n    alert('Your password could not be changed\\nError: ' + error.message);\n  });\n};\nexport const registerUser = creds => async dispatch => {\n  return fetch(baseUrl + 'users/signup', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(creds)\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    if (response.success) {\n      // If Registration was successful, alert the user\n      alert('Registration Successful');\n    } else {\n      var error = new Error('Error ' + response.status);\n      error.response = response;\n      throw error;\n    }\n  }).catch(error => alert(error.message + '\\n' + 'May be someone has already registered with that username, email or Roll No.\\nTry Entering a new username,email or Roll No. '));\n};","map":{"version":3,"sources":["C:/Users/Quang/Documents/GitHub/Library-management-/client/src/redux/actions/userAction.tsx"],"names":["ActionTypes","baseUrl","fetchIssues","requestLogout","receiveLogout","editUser","_id","firstname","lastname","roll","email","dispatch","newUser","bearer","localStorage","getItem","fetch","method","body","JSON","stringify","headers","then","response","ok","error","Error","status","statusText","json","removeItem","setItem","editUserdispatch","catch","alert","message","usersFailed","errmess","type","USERS_FAILED","payload","usersLoading","USERS_LOADING","fetchUsers","users","addUsers","ADD_USERS","USER","EDIT_USER","editPasswordDispatch","CREDS","EDIT_PASSWORD","requestLogin","creds","LOGIN_REQUEST","receiveLogin","LOGIN_SUCCESS","token","userinfo","loginError","LOGIN_FAILURE","loginUser","success","admin","setTimeout","logoutUser","editPassword","username","password","newCreds","registerUser"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport {baseUrl} from '../../baseUrl'\r\nimport {fetchIssues, requestLogout, receiveLogout} from \"./issueAction\"\r\n\r\n//Edit user\r\nexport const editUser = (_id:string, firstname:string, lastname:string, roll:number, email:string) => async (dispatch:Function) => {\r\n    const newUser = {\r\n  firstname: firstname,\r\n  lastname: lastname,\r\n  roll: roll,\r\n  email: email  };\r\n    const bearer = 'Bearer ' + localStorage.getItem('token');\r\n    return await fetch(baseUrl + 'users/' + _id, {\r\n        method: \"PUT\"\r\n      //  ,     credentials: 'same-origin'\r\n        ,      body: JSON.stringify(newUser),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': bearer\r\n        } })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error:any = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => { \r\n      localStorage.removeItem('userinfo');\r\n      localStorage.setItem('userinfo', JSON.stringify(response));\r\n      return dispatch(editUserdispatch(response));})\r\n    .catch(error =>  {  \r\n    alert('Your profile could not be edited\\nError: '+error.message+'\\n May be someone has already registered with that Roll No. or Email'); });\r\n  };\r\n\r\n  //Load users\r\n  export const usersFailed = (errmess:Error) => ({\r\n    type: ActionTypes.USERS_FAILED,\r\n    payload: errmess\r\n  });\r\n  export const usersLoading = () => ({\r\n    type: ActionTypes.USERS_LOADING\r\n  });\r\n  export const fetchUsers = () => async (dispatch:Function) => {\r\n    const bearer = 'Bearer ' + localStorage.getItem('token');\r\n    dispatch(usersLoading());\r\n    return fetch(baseUrl+'users',{\r\n      headers: {\r\n        'Authorization': bearer\r\n      }\r\n    })\r\n        .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error:any = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(users => dispatch(addUsers(users)))\r\n    .catch(error => dispatch(usersFailed(error.message)));\r\n}\r\n\r\nexport const addUsers = (users:any) => ({\r\n    type: ActionTypes.ADD_USERS,\r\n    payload: users\r\n  });\r\n  \r\n\r\nexport const editUserdispatch = (USER:any) => ({\r\n    type: ActionTypes.EDIT_USER,\r\n    payload: USER\r\n  });\r\n  \r\nexport const editPasswordDispatch = (CREDS:any) => ({\r\n    type: ActionTypes.EDIT_PASSWORD,\r\n    payload: CREDS\r\n})\r\n\r\nexport const requestLogin = (creds:any) => {\r\n    return {\r\n        type: ActionTypes.LOGIN_REQUEST,\r\n        creds\r\n    }\r\n  }\r\n  \r\n  export const receiveLogin = (response:any) => {\r\n    return {\r\n        type: ActionTypes.LOGIN_SUCCESS,\r\n        token: response.token,\r\n        userinfo: response.userinfo\r\n    }\r\n  }\r\n  \r\n  export const loginError = (message:any) => {\r\n    return {\r\n        type: ActionTypes.LOGIN_FAILURE,\r\n        message\r\n    }\r\n  }\r\n  \r\n  export const loginUser = (creds:any) => async (dispatch:Function) => {\r\n    dispatch(requestLogin(creds));\r\n    return fetch(baseUrl + 'users/login', {\r\n        method: 'POST',\r\n        headers: { \r\n            'Content-Type':'application/json' \r\n        },\r\n        body: JSON.stringify(creds)\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n            return response;\r\n        } else {\r\n            var error:any = new Error('Error ' + response.status + ': ' + response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n        },\r\n        error => {\r\n            throw error;\r\n        })\r\n    .then(response => response.json())\r\n    .then(response => {\r\n        if (response.success) {\r\n            // If login was successful, set the token in local storage\r\n            localStorage.setItem('token', response.token);\r\n            localStorage.setItem('creds', JSON.stringify(creds));\r\n            localStorage.setItem('userinfo', JSON.stringify(response.userinfo));    \r\n            dispatch(fetchIssues(!response.userinfo.admin));      \r\n            if(response.userinfo.admin) {\r\n              dispatch(fetchUsers())\r\n            }\r\n            setTimeout(()=>{\r\n              logoutUser();\r\n              alert('Your JWT token has expired. \\nPlease log in again to continue.');\r\n             },3600*1000);\r\n            // Dispatch the success action\r\n            dispatch(receiveLogin(response));\r\n        \r\n        }\r\n        else {\r\n            var error:any = new Error('Error ' + response.status);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n    })\r\n    .catch(error => {\r\n      alert(error.message+'\\n'+\"Username and password didn't match\");\r\n       return dispatch(loginError(error.message));})\r\n  };\r\n  \r\nexport const logoutUser = () => (dispatch:Function) => {\r\n  dispatch(requestLogout())\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('creds');  \r\n  localStorage.removeItem('userinfo');  \r\n  dispatch(receiveLogout())\r\n}\r\n\r\nexport const editPassword = (_id:string,username:string,password:string) => async (dispatch:Function) => {\r\n  const bearer = 'Bearer ' + localStorage.getItem('token');\r\n  return fetch(baseUrl + 'users/password/' + _id, {\r\n    method: \"PUT\"\r\n  //  ,     credentials: 'same-origin'\r\n    ,      body: JSON.stringify({password: password}),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      'Authorization': bearer\r\n    } })\r\n.then(response => {\r\n    if (response.ok) {\r\n      return response;\r\n    } else {\r\n      var error:any = new Error('Error ' + response.status + ': ' + response.statusText+'\\n ');\r\n      error.response = response;\r\n      throw error;\r\n    }\r\n  },\r\n  error => {\r\n        throw error;\r\n  })\r\n.then(response => response.json())\r\n.then(response => { \r\n  let newCreds={username: username, password: password};\r\n  localStorage.removeItem('creds');\r\n  localStorage.setItem('creds', JSON.stringify(newCreds));\r\n  alert('Password changed successfully');\r\n  return dispatch(editPasswordDispatch(newCreds));})\r\n.catch(error =>  {  \r\nalert('Your password could not be changed\\nError: '+error.message); });\r\n}\r\n\r\nexport const registerUser = (creds:any) => async (dispatch:Function) => {\r\n  return fetch(baseUrl + 'users/signup', {\r\n      method: 'POST',\r\n      headers: { \r\n          'Content-Type':'application/json' \r\n      },\r\n      body: JSON.stringify(creds)\r\n  })\r\n  .then(response => {\r\n      if (response.ok) {\r\n          return response;\r\n      } else {\r\n          var error:any = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n      }\r\n      },\r\n      error => {\r\n          throw error;\r\n      })\r\n  .then(response => response.json())\r\n  .then(response => {\r\n      if (response.success) {\r\n          // If Registration was successful, alert the user\r\n          alert('Registration Successful');\r\n        }\r\n      else {\r\n          var error:any = new Error('Error ' + response.status);\r\n          error.response = response;\r\n          throw error;\r\n      }\r\n  })\r\n  .catch(error => alert(error.message+'\\n'+\r\n      'May be someone has already registered with that username, email or Roll No.\\nTry Entering a new username,email or Roll No. '))\r\n};"]},"metadata":{},"sourceType":"module"}