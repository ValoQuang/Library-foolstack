{"ast":null,"code":"import * as ActionTypes from '../actions/ActionTypes';\n\nconst Auth = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isLoading: false,\n    isAuthenticated: localStorage.getItem('token') ? true : false,\n    token: localStorage.getItem('token'),\n    user: localStorage.getItem('creds') != null ? JSON.parse(localStorage.getItem('creds')) : null,\n    userinfo: localStorage.getItem('userinfo') ? JSON.parse(localStorage.getItem('creds')) : null,\n    errMess: null\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ActionTypes.LOGIN_REQUEST:\n      return { ...state,\n        isLoading: true,\n        isAuthenticated: false,\n        user: action.creds\n      };\n\n    case ActionTypes.LOGIN_SUCCESS:\n      return { ...state,\n        isLoading: false,\n        isAuthenticated: true,\n        errMess: '',\n        token: action.token,\n        userinfo: action.userinfo\n      };\n\n    case ActionTypes.LOGIN_FAILURE:\n      return { ...state,\n        isLoading: false,\n        isAuthenticated: false,\n        errMess: action.message\n      };\n\n    case ActionTypes.LOGOUT_REQUEST:\n      return { ...state,\n        isLoading: true,\n        isAuthenticated: true\n      };\n\n    case ActionTypes.LOGOUT_SUCCESS:\n      return { ...state,\n        isLoading: false,\n        isAuthenticated: false,\n        token: '',\n        user: null,\n        userinfo: null\n      };\n\n    case ActionTypes.EDIT_USER:\n      return { ...state,\n        userinfo: action.payload\n      };\n\n    case ActionTypes.EDIT_PASSWORD:\n      return { ...state,\n        user: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default Auth;","map":{"version":3,"sources":["C:/Users/Quang/Documents/GitHub/Library-management-/client/src/redux/reducers/auth.tsx"],"names":["ActionTypes","Auth","state","isLoading","isAuthenticated","localStorage","getItem","token","user","JSON","parse","userinfo","errMess","action","type","LOGIN_REQUEST","creds","LOGIN_SUCCESS","LOGIN_FAILURE","message","LOGOUT_REQUEST","LOGOUT_SUCCESS","EDIT_USER","payload","EDIT_PASSWORD"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;;AAgBA,MAAMC,IAAI,GAAG,YAOO;AAAA,MAPNC,KAOM,uEAPE;AACdC,IAAAA,SAAS,EAAE,KADG;AAEdC,IAAAA,eAAe,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,IAAgC,IAAhC,GAAuC,KAF1C;AAGdC,IAAAA,KAAK,EAAEF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAHO;AAIdE,IAAAA,IAAI,EAAEH,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAgC,IAAhC,GAAuCG,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAvC,GAAmF,IAJ3E;AAKdK,IAAAA,QAAQ,EAAEN,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAmCG,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAnC,GAA+E,IAL3E;AAMdM,IAAAA,OAAO,EAAE;AANK,GAOF;AAAA,MAAbC,MAAa;;AAChB,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,WAAW,CAACe,aAAjB;AACI,aAAO,EAAC,GAAGb,KAAJ;AACHC,QAAAA,SAAS,EAAE,IADR;AAEHC,QAAAA,eAAe,EAAE,KAFd;AAGHI,QAAAA,IAAI,EAAEK,MAAM,CAACG;AAHV,OAAP;;AAKJ,SAAKhB,WAAW,CAACiB,aAAjB;AACI,aAAO,EAAC,GAAGf,KAAJ;AACHC,QAAAA,SAAS,EAAE,KADR;AAEHC,QAAAA,eAAe,EAAE,IAFd;AAGHQ,QAAAA,OAAO,EAAE,EAHN;AAIHL,QAAAA,KAAK,EAAEM,MAAM,CAACN,KAJX;AAKHI,QAAAA,QAAQ,EAAEE,MAAM,CAACF;AALd,OAAP;;AAOJ,SAAKX,WAAW,CAACkB,aAAjB;AACI,aAAO,EAAC,GAAGhB,KAAJ;AACHC,QAAAA,SAAS,EAAE,KADR;AAEHC,QAAAA,eAAe,EAAE,KAFd;AAGHQ,QAAAA,OAAO,EAAEC,MAAM,CAACM;AAHb,OAAP;;AAKJ,SAAKnB,WAAW,CAACoB,cAAjB;AACI,aAAO,EAAC,GAAGlB,KAAJ;AACHC,QAAAA,SAAS,EAAE,IADR;AAEHC,QAAAA,eAAe,EAAE;AAFd,OAAP;;AAKJ,SAAKJ,WAAW,CAACqB,cAAjB;AACI,aAAO,EAAC,GAAGnB,KAAJ;AACHC,QAAAA,SAAS,EAAE,KADR;AAEHC,QAAAA,eAAe,EAAE,KAFd;AAGHG,QAAAA,KAAK,EAAE,EAHJ;AAIHC,QAAAA,IAAI,EAAE,IAJH;AAKHG,QAAAA,QAAQ,EAAE;AALP,OAAP;;AAQJ,SAAKX,WAAW,CAACsB,SAAjB;AACI,aAAO,EAAC,GAAGpB,KAAJ;AACHS,QAAAA,QAAQ,EAAEE,MAAM,CAACU;AADd,OAAP;;AAGJ,SAAKvB,WAAW,CAACwB,aAAjB;AACI,aAAO,EACH,GAAGtB,KADA;AAEHM,QAAAA,IAAI,EAAEK,MAAM,CAACU;AAFV,OAAP;;AAIJ;AACI,aAAOrB,KAAP;AA9CR;AAgDH,CAxDD;;AA0DA,eAAeD,IAAf","sourcesContent":["import * as ActionTypes from '../actions/ActionTypes';\r\nimport {PayloadAction} from '@reduxjs/toolkit'\r\n// The auth reducer. The starting state sets authentication\r\n// based on a token being in local storage. In a real app,\r\n// we would also want a util to check if the token is expired.\r\n\r\n\r\nexport interface A {\r\n    type:String,\r\n    creds: any,\r\n    token:any,\r\n    userinfo:any,\r\n    message:any,\r\n    payload:any\r\n}\r\n\r\nconst Auth = (state = {\r\n        isLoading: false,\r\n        isAuthenticated: localStorage.getItem('token') ? true : false,\r\n        token: localStorage.getItem('token'),\r\n        user: localStorage.getItem('creds')!= null ? JSON.parse(localStorage.getItem('creds')) : null,\r\n        userinfo: localStorage.getItem('userinfo') ? JSON.parse(localStorage.getItem('creds')) : null,\r\n        errMess: null\r\n    }, action:A) => {\r\n    switch (action.type) {\r\n        case ActionTypes.LOGIN_REQUEST:\r\n            return {...state,\r\n                isLoading: true,\r\n                isAuthenticated: false,\r\n                user: action.creds\r\n            };\r\n        case ActionTypes.LOGIN_SUCCESS:\r\n            return {...state,\r\n                isLoading: false,\r\n                isAuthenticated: true,\r\n                errMess: '',\r\n                token: action.token,\r\n                userinfo: action.userinfo\r\n            };\r\n        case ActionTypes.LOGIN_FAILURE:\r\n            return {...state,\r\n                isLoading: false,\r\n                isAuthenticated: false,\r\n                errMess: action.message\r\n            };\r\n        case ActionTypes.LOGOUT_REQUEST:\r\n            return {...state,\r\n                isLoading: true,\r\n                isAuthenticated: true\r\n            };\r\n            \r\n        case ActionTypes.LOGOUT_SUCCESS:\r\n            return {...state,\r\n                isLoading: false,\r\n                isAuthenticated: false,\r\n                token: '',\r\n                user: null,\r\n                userinfo: null\r\n            };\r\n\r\n        case ActionTypes.EDIT_USER:\r\n            return {...state,\r\n                userinfo: action.payload};\r\n\r\n        case ActionTypes.EDIT_PASSWORD:\r\n            return {\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default Auth;"]},"metadata":{},"sourceType":"module"}