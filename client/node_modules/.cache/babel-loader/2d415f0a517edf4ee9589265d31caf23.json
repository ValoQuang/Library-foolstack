{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Quang\\\\Documents\\\\GitHub\\\\Library-management-\\\\client\\\\src\\\\components\\\\Users\\\\ProfileComponent.tsx\";\nimport React, { Component } from 'react';\nimport { Card, CardBody, CardHeader, Label, CardText, Button, Modal, ModalBody, ModalHeader, FormGroup } from 'reactstrap';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\nimport { required, maxLength, minLength, validEmail, matchcreds } from \"../Validator/index\";\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditModalOpen: false,\n      isPasswordModalOpen: false\n    };\n    this.toggleEditModal = this.toggleEditModal.bind(this);\n    this.togglePasswordModal = this.togglePasswordModal.bind(this);\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  togglePasswordModal() {\n    this.setState({\n      isPasswordModalOpen: !this.state.isPasswordModalOpen\n    });\n  }\n\n  toggleEditModal() {\n    this.setState({\n      isEditModalOpen: !this.state.isEditModalOpen\n    });\n  }\n\n  render() {\n    if (this.props.auth.userinfo === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row heading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }\n      }, \"Failed to fetch. Please reload the page\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container mt-6 home text-center align-self-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row text-center justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    }, \"My Profile\")), /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, \" First Name : \", '          ' + this.props.auth.userinfo.firstname), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, \" Last Name : \", '          ' + this.props.auth.userinfo.lastname), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, \" \", this.props.auth.userinfo.admin ? 'Admin Id : ' : 'Roll No.', \" : \", '          ' + this.props.auth.userinfo.roll), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, \" Email : \", '          ' + this.props.auth.userinfo.email)), /*#__PURE__*/React.createElement(Button, {\n      color: \"info\",\n      onClick: this.toggleEditModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, \"Edit \\xA0\", '   ', /*#__PURE__*/React.createElement(\"span\", {\n      className: \"fa fa-pencil\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 81\n      }\n    })), ' ', this.props.auth.userinfo.admin ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(Button, {\n      color: \"info\",\n      onClick: this.togglePasswordModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, \"Change Password \\xA0\", '   ', /*#__PURE__*/React.createElement(\"span\", {\n      className: \"fa fa-key\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 42\n      }\n    }))))), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.isEditModalOpen,\n      toggle: this.toggleEditModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggleEditModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 22\n      }\n    }, \"Edit Profile\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(LocalForm, {\n      model: \"user\",\n      onSubmit: values => {\n        this.toggleEditModal();\n        this.props.editUser(this.props.auth.userinfo._id, values.firstname, values.lastname, values.roll, values.email);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"firstname\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 33\n      }\n    }, \"First Name\"), /*#__PURE__*/React.createElement(Control.text, {\n      model: \".firstname\",\n      id: \"firstname\",\n      name: \"firstname\",\n      className: \"form-control\",\n      defaultValue: this.props.auth.userinfo.firstname,\n      placeholder: \"firstname\",\n      validators: {\n        required,\n        minLength: minLength(3),\n        maxLength: maxLength(20)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Errors, {\n      className: \"text-danger\",\n      model: \".firstname\",\n      show: \"touched\",\n      messages: {\n        required: 'Required',\n        minLength: ' Must be greater than 2 characters',\n        maxLength: ' Must be 20 characters or less'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"lastname\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 34\n      }\n    }, \"Last Name\"), /*#__PURE__*/React.createElement(Control.text, {\n      model: \".lastname\",\n      id: \"lastname\",\n      name: \"lastname\",\n      className: \"form-control\",\n      defaultValue: this.props.auth.userinfo.lastname,\n      placeholder: \"lastname\",\n      validators: {\n        required,\n        minLength: minLength(3),\n        maxLength: maxLength(20)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Errors, {\n      className: \"text-danger\",\n      model: \".lastname\",\n      show: \"touched\",\n      messages: {\n        required: 'Required',\n        minLength: ' Must be greater than 2 characters',\n        maxLength: ' Must be 20 characters or less'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"roll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 34\n      }\n    }, \"Roll No.\"), /*#__PURE__*/React.createElement(Control.text, {\n      model: \".roll\",\n      id: \"roll\",\n      name: \"roll\",\n      className: \"form-control\",\n      defaultValue: this.props.auth.userinfo.roll,\n      placeholder: \"roll\",\n      validators: {\n        required,\n        minLength: minLength(3),\n        maxLength: maxLength(12)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Errors, {\n      className: \"text-danger\",\n      model: \".roll\",\n      show: \"touched\",\n      messages: {\n        required: 'Required',\n        minLength: ' Must be greater than 2 characters',\n        maxLength: ' Must be 12 characters or less'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 34\n      }\n    }, \"E-mail\"), /*#__PURE__*/React.createElement(Control.text, {\n      model: \".email\",\n      id: \"email\",\n      name: \"email\",\n      defaultValue: this.props.auth.userinfo.email,\n      className: \"form-control\",\n      placeholder: \"email\",\n      validators: {\n        required,\n        validEmail\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Errors, {\n      className: \"text-danger\",\n      model: \".email\",\n      show: \"touched\",\n      messages: {\n        required: 'Required',\n        validEmail: ' Enter a valid email'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      value: \"submit\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    }, \"Submit\")))), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.isPasswordModalOpen,\n      toggle: this.togglePasswordModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.togglePasswordModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 22\n      }\n    }, \"Change Password\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(LocalForm, {\n      model: \"passwordform\",\n      onSubmit: values => {\n        if (values.newpassword === values.confirm) {\n          this.togglePasswordModal();\n          this.props.editPassword(this.props.auth.userinfo._id, this.props.auth.user.username, values.newpassword);\n        } else {\n          alert(\"Your passwords didn't match. Please try again\");\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }\n    }, \"Current Password\"), /*#__PURE__*/React.createElement(Control.text, {\n      model: \".password\",\n      id: \"password\",\n      name: \"password\",\n      className: \"form-control\",\n      placeholder: \"password\",\n      validators: {\n        required,\n        minLength: minLength(6),\n        maxLength: maxLength(20),\n        matchcreds: matchcreds(this.props.auth.user.password)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Errors, {\n      className: \"text-danger\",\n      model: \".password\",\n      show: \"touched\",\n      messages: {\n        required: 'Required',\n        minLength: ' Must be greater than 5 characters',\n        maxLength: ' Must be 20 characters or less',\n        matchcreds: ' Enter the correct password'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"newpassword\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 29\n      }\n    }, \"New password\"), /*#__PURE__*/React.createElement(Control.text, {\n      model: \".newpassword\",\n      id: \"newpassword\",\n      name: \"newpassword\",\n      className: \"form-control\",\n      placeholder: \"New Password\",\n      validators: {\n        required,\n        minLength: minLength(6),\n        maxLength: maxLength(20)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Errors, {\n      className: \"text-danger\",\n      model: \".newpassword\",\n      show: \"touched\",\n      messages: {\n        required: 'Required',\n        minLength: ' Must be greater than 5 characters',\n        maxLength: ' Must be 20 characters or less'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"confirm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, \"Confirm Password\"), /*#__PURE__*/React.createElement(Control.text, {\n      model: \".confirm\",\n      id: \"confirm\",\n      name: \"confirm\",\n      className: \"form-control\",\n      placeholder: \"Re-enter the new password\",\n      validators: {\n        required,\n        minLength: minLength(6),\n        maxLength: maxLength(20)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Errors, {\n      className: \"text-danger\",\n      model: \".confirm\",\n      show: \"touched\",\n      messages: {\n        required: 'Required',\n        minLength: ' Must be greater than 5 characters',\n        maxLength: ' Must be 20 characters or less'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      value: \"submit\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 29\n      }\n    }, \"Submit\")))));\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["C:/Users/Quang/Documents/GitHub/Library-management-/client/src/components/Users/ProfileComponent.tsx"],"names":["React","Component","Card","CardBody","CardHeader","Label","CardText","Button","Modal","ModalBody","ModalHeader","FormGroup","Control","LocalForm","Errors","required","maxLength","minLength","validEmail","matchcreds","Profile","constructor","props","state","isEditModalOpen","isPasswordModalOpen","toggleEditModal","bind","togglePasswordModal","componentDidMount","window","scrollTo","setState","render","auth","userinfo","firstname","lastname","admin","roll","email","values","editUser","_id","newpassword","confirm","editPassword","user","username","alert","password"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport {Card,CardBody,CardHeader,Label,CardText,Button,Modal,ModalBody,ModalHeader,FormGroup} from 'reactstrap';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport {required,maxLength,minLength,validEmail,matchcreds} from \"../Validator/index\"\r\n\r\ninterface profileProp {\r\n    auth:any,\r\n    editPassword:any,\r\n    errMess:any,\r\n    user:any,\r\n    editUser:Function\r\n}\r\ninterface profileState {\r\n    isPasswordModalOpen:boolean,\r\n    isEditModalOpen:boolean,\r\n}\r\n\r\nclass Profile extends Component<profileProp, profileState> {\r\n    constructor(props:profileProp){\r\n        super(props);\r\n        this.state={\r\n            isEditModalOpen: false,\r\n            isPasswordModalOpen: false\r\n        }\r\n        this.toggleEditModal=this.toggleEditModal.bind(this);\r\n        this.togglePasswordModal=this.togglePasswordModal.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0)\r\n      }\r\n\r\n    togglePasswordModal(){\r\n        this.setState({\r\n            isPasswordModalOpen: !this.state.isPasswordModalOpen\r\n        });\r\n    }\r\n\r\n    toggleEditModal(){\r\n            this.setState({isEditModalOpen: !this.state.isEditModalOpen});\r\n          }\r\nrender(){\r\n    if(this.props.auth.userinfo===null){\r\n        return (\r\n            <div className=\"row heading\">\r\n                Failed to fetch. Please reload the page\r\n            </div>\r\n    )}\r\n    return(\r\n        <div className=\"container mt-6 home text-center align-self-center\">\r\n        <div className=\"row text-center justify-content-center\">\r\n        <Card className=\"heading\">        \r\n        <CardHeader><h3>My Profile</h3></CardHeader>\r\n        <CardBody>\r\n          <CardText>\r\n          <h5> First Name : {'          '+this.props.auth.userinfo.firstname}</h5>\r\n          <h5> Last Name : {'          '+this.props.auth.userinfo.lastname}</h5>\r\n          <h5> {(this.props.auth.userinfo.admin)? 'Admin Id : ':'Roll No.'} : {'          '+this.props.auth.userinfo.roll}</h5>\r\n          <h5> Email : {'          '+this.props.auth.userinfo.email}</h5>\r\n          </CardText>\r\n          <Button color=\"info\" onClick={this.toggleEditModal}>Edit &nbsp;{'   '}<span className=\"fa fa-pencil\"/></Button>\r\n        {' '}\r\n        {this.props.auth.userinfo.admin?<div/>:       \r\n        <Button color=\"info\" onClick={this.togglePasswordModal}>\r\n            Change Password &nbsp;{'   '}<span className=\"fa fa-key\"/>\r\n        </Button>}\r\n        </CardBody>\r\n          </Card>\r\n            </div>\r\n            <Modal isOpen={this.state.isEditModalOpen} toggle={this.toggleEditModal}>\r\n                     <ModalHeader toggle={this.toggleEditModal}>\r\n                         Edit Profile\r\n                     </ModalHeader>\r\n                     <ModalBody>\r\n                     <LocalForm model=\"user\" onSubmit={(values) => {\r\n                               this.toggleEditModal();\r\n                               this.props.editUser(this.props.auth.userinfo._id, values.firstname, \r\n                                values.lastname, values.roll, values.email);     \r\n                                 }}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"firstname\">First Name</Label>\r\n                                <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\" \r\n                            className=\"form-control\" defaultValue={this.props.auth.userinfo.firstname}\r\n                             placeholder=\"firstname\" \r\n                             validators={{required,minLength: minLength(3),maxLength:maxLength(20)}} />\r\n                            <Errors className=\"text-danger\" model=\".firstname\" show=\"touched\" messages={{required: 'Required',\r\n                            minLength: ' Must be greater than 2 characters', maxLength:' Must be 20 characters or less'}}/>\r\n                            </FormGroup>\r\n                            <FormGroup>    \r\n                                 <Label htmlFor=\"lastname\">Last Name</Label>\r\n                                <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\" \r\n                            className=\"form-control\"  defaultValue={this.props.auth.userinfo.lastname}\r\n                            placeholder=\"lastname\" validators={{required,minLength: minLength(3),maxLength:maxLength(20)}} />\r\n                            <Errors className=\"text-danger\" model=\".lastname\" show=\"touched\" messages={{required: 'Required',\r\n                            minLength: ' Must be greater than 2 characters', maxLength:' Must be 20 characters or less'}}/>\r\n                            </FormGroup>\r\n                            <FormGroup>    \r\n                                 <Label htmlFor=\"roll\">Roll No.</Label>\r\n                                <Control.text model=\".roll\" id=\"roll\" name=\"roll\" \r\n                            className=\"form-control\"  defaultValue={this.props.auth.userinfo.roll}\r\n                            placeholder=\"roll\" validators={{required,minLength: minLength(3),maxLength:maxLength(12)}} />\r\n                            <Errors className=\"text-danger\" model=\".roll\" show=\"touched\" messages={{required: 'Required',\r\n                            minLength: ' Must be greater than 2 characters', maxLength:' Must be 12 characters or less'}}/>\r\n                            </FormGroup>\r\n                            <FormGroup>    \r\n                                 <Label htmlFor=\"email\">E-mail</Label>\r\n                                <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                 defaultValue={this.props.auth.userinfo.email} \r\n                            className=\"form-control\" placeholder=\"email\" validators={{required,validEmail}} />\r\n                            <Errors className=\"text-danger\" model=\".email\" show=\"touched\" messages={{required: 'Required',\r\n                            validEmail: ' Enter a valid email'}}/>\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\" >Submit</Button>\r\n                        </LocalForm>\r\n                     </ModalBody>\r\n          </Modal>\r\n          <Modal isOpen={this.state.isPasswordModalOpen} toggle={this.togglePasswordModal}>\r\n                     <ModalHeader toggle={this.togglePasswordModal}>\r\n                         Change Password\r\n                     </ModalHeader>\r\n                     <ModalBody>\r\n                     <LocalForm model=\"passwordform\" onSubmit={(values) => {\r\n                         if(values.newpassword===values.confirm){\r\n                               this.togglePasswordModal();\r\n                               this.props.editPassword(this.props.auth.userinfo._id, this.props.auth.user.username, \r\n                                values.newpassword);     \r\n                               }\r\n                        else {\r\n                            alert(\"Your passwords didn't match. Please try again\");\r\n                        }\r\n                                 }}>\r\n                            <FormGroup>\r\n                            <Label htmlFor=\"password\">Current Password</Label>\r\n                                <Control.text model=\".password\" id=\"password\" name=\"password\" \r\n                            className=\"form-control\" placeholder=\"password\" validators={{required,minLength: minLength(6),maxLength:maxLength(20),\r\n                            matchcreds: matchcreds(this.props.auth.user.password)}} />\r\n                            <Errors className=\"text-danger\" model=\".password\" show=\"touched\" messages={{required: 'Required',\r\n                            minLength: ' Must be greater than 5 characters', maxLength:' Must be 20 characters or less',\r\n                            matchcreds: ' Enter the correct password'}}/>\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                            <Label htmlFor=\"newpassword\">New password</Label>\r\n                                <Control.text model=\".newpassword\" id=\"newpassword\" name=\"newpassword\" \r\n                            className=\"form-control\" placeholder=\"New Password\" validators={{required,minLength: minLength(6),maxLength:maxLength(20)\r\n                            }}  />\r\n                            <Errors className=\"text-danger\" model=\".newpassword\" show=\"touched\" messages={{required: 'Required',\r\n                            minLength: ' Must be greater than 5 characters', maxLength:' Must be 20 characters or less'\r\n                      }}/>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                            <Label htmlFor=\"confirm\">Confirm Password</Label>\r\n                                <Control.text model=\".confirm\" id=\"confirm\" name=\"confirm\" \r\n                            className=\"form-control\"\r\n                            placeholder=\"Re-enter the new password\" validators={{required,minLength: minLength(6),maxLength:maxLength(20)\r\n                                 } } />\r\n                            <Errors className=\"text-danger\" model=\".confirm\" show=\"touched\" messages={{required: 'Required',\r\n                            minLength: ' Must be greater than 5 characters', maxLength:' Must be 20 characters or less'\r\n                       }}/>\r\n                            </FormGroup>\r\n                            \r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\" >Submit</Button>\r\n                        </LocalForm>\r\n                     </ModalBody>               \r\n          </Modal>\r\n            </div>\r\n        );\r\n}}\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}