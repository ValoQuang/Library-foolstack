{"ast":null,"code":"import * as ActionTypes from '../actions/ActionTypes';\n\nconst Books = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isLoading: true,\n    errMess: null,\n    books: []\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ActionTypes.ADD_BOOKS:\n      return { ...state,\n        isLoading: false,\n        errMess: null,\n        books: action.payload\n      };\n\n    case ActionTypes.BOOKS_LOADING:\n      return { ...state,\n        isLoading: true,\n        errMess: null,\n        books: []\n      };\n\n    case ActionTypes.BOOKS_FAILED:\n      return { ...state,\n        isLoading: false,\n        errMess: action.payload\n      };\n\n    case ActionTypes.ADD_BOOK:\n      var book = action.payload;\n      return { ...state,\n        books: state.books.concat(book)\n      };\n\n    case ActionTypes.EDIT_BOOK:\n      var newbook = action.payload;\n      return { ...state,\n        books: state.books.map(book => {\n          if (book._id === newbook._id) {\n            return newbook;\n          } else {\n            return book;\n          }\n        })\n      };\n\n    case ActionTypes.DELETE_BOOK:\n      var resp = action.payload;\n      return { ...state,\n        books: state.books.filter(book => {\n          return book._id !== resp._id;\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default Books;","map":{"version":3,"sources":["C:/Users/Quang/Documents/GitHub/Library-management-/client/src/redux/reducers/books.tsx"],"names":["ActionTypes","Books","state","isLoading","errMess","books","action","type","ADD_BOOKS","payload","BOOKS_LOADING","BOOKS_FAILED","ADD_BOOK","book","concat","EDIT_BOOK","newbook","map","_id","DELETE_BOOK","resp","filter"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;;AAGA,MAAMC,KAAK,GAAG,YAEkC;AAAA,MAFjCC,KAEiC,uEAFzB;AAAEC,IAAAA,SAAS,EAAE,IAAb;AACnBC,IAAAA,OAAO,EAAE,IADU;AAEnBC,IAAAA,KAAK,EAAC;AAFa,GAEyB;AAAA,MAAjCC,MAAiC;;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,WAAW,CAACQ,SAAjB;AACI,aAAO,EAAC,GAAGN,KAAJ;AAAWC,QAAAA,SAAS,EAAE,KAAtB;AAA6BC,QAAAA,OAAO,EAAE,IAAtC;AAA4CC,QAAAA,KAAK,EAAEC,MAAM,CAACG;AAA1D,OAAP;;AAEJ,SAAKT,WAAW,CAACU,aAAjB;AACI,aAAO,EAAC,GAAGR,KAAJ;AAAWC,QAAAA,SAAS,EAAE,IAAtB;AAA4BC,QAAAA,OAAO,EAAE,IAArC;AAA2CC,QAAAA,KAAK,EAAE;AAAlD,OAAP;;AAEJ,SAAKL,WAAW,CAACW,YAAjB;AACI,aAAO,EAAC,GAAGT,KAAJ;AAAWC,QAAAA,SAAS,EAAE,KAAtB;AAA6BC,QAAAA,OAAO,EAAEE,MAAM,CAACG;AAA7C,OAAP;;AAEJ,SAAKT,WAAW,CAACY,QAAjB;AACI,UAAIC,IAAQ,GAAGP,MAAM,CAACG,OAAtB;AACA,aAAO,EAAE,GAAGP,KAAL;AAAYG,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYS,MAAZ,CAAmBD,IAAnB;AAAnB,OAAP;;AAEJ,SAAKb,WAAW,CAACe,SAAjB;AACI,UAAIC,OAAW,GAAGV,MAAM,CAACG,OAAzB;AACA,aAAO,EAAE,GAAGP,KAAL;AAAYG,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYY,GAAZ,CAAiBJ,IAAD,IACtC;AACA,cAAGA,IAAI,CAACK,GAAL,KAAWF,OAAO,CAACE,GAAtB,EACA;AACI,mBAAOF,OAAP;AACH,WAHD,MAIC;AACG,mBAAOH,IAAP;AACP;AACK,SAToB;AAAnB,OAAP;;AAYJ,SAAKb,WAAW,CAACmB,WAAjB;AACA,UAAIC,IAAQ,GAAGd,MAAM,CAACG,OAAtB;AACA,aAAO,EAAE,GAAGP,KAAL;AAAYG,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYgB,MAAZ,CAAoBR,IAAD,IAAY;AACrD,iBAAOA,IAAI,CAACK,GAAL,KAAWE,IAAI,CAACF,GAAvB;AAA2B,SADL;AAAnB,OAAP;;AAGA;AACI,aAAOhB,KAAP;AAlCR;AAoCH,CAvCD;;AAwCA,eAAeD,KAAf","sourcesContent":["import * as ActionTypes from '../actions/ActionTypes';\r\nimport {PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst Books = (state = { isLoading: true,\r\n    errMess: null,\r\n    books:[]}, action:PayloadAction<Object>) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_BOOKS:\r\n            return {...state, isLoading: false, errMess: null, books: action.payload};\r\n\r\n        case ActionTypes.BOOKS_LOADING:\r\n            return {...state, isLoading: true, errMess: null, books: []}\r\n\r\n        case ActionTypes.BOOKS_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload};\r\n\r\n        case ActionTypes.ADD_BOOK:\r\n            var book:any = action.payload;\r\n            return { ...state, books: state.books.concat(book)};\r\n\r\n        case ActionTypes.EDIT_BOOK:\r\n            var newbook:any = action.payload;\r\n            return { ...state, books: state.books.map((book:any)=>\r\n                {\r\n                if(book._id===newbook._id)\r\n                {\r\n                    return newbook;\r\n                }\r\n            else {\r\n                    return book;\r\n            }\r\n                 })\r\n                }\r\n\r\n        case ActionTypes.DELETE_BOOK:\r\n        var resp:any = action.payload;\r\n        return { ...state, books: state.books.filter((book:any)=>{\r\n            return book._id!==resp._id}) }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default Books;"]},"metadata":{},"sourceType":"module"}